---
name: PR

on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:


env:
  FORCE_COLOR: ${{ vars.FORCE_COLOR }}
  POETRY_VERSION: ${{ vars.RECIPES_POETRY_VERSION }}
  CR: ${{ vars.RECIPES_CR}}
  IMAGE_PATH: /tmp/image.tar

jobs:
  vars:
    name: Variables
    runs-on: ubuntu-latest
    outputs:
      SHA_SHORT: ${{ steps.vars.outputs.SHA_SHORT }}
      IMAGE_NAME: ${{ steps.vars.outputs.IMAGE_NAME }}
      VERSION: ${{ steps.vars.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry==$POETRY_VERSION
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "poetry"
      - id: vars
        run: |
          echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
          echo "VERSION=$(poetry version -s)" >> "$GITHUB_OUTPUT"
          echo "IMAGE_NAME=${{ env.CR }}${{ github.repository }}" >> "$GITHUB_OUTPUT"
      - run: echo "$IMAGE_NAME:$VERSION"
        env:
          VERSION: ${{ steps.vars.outputs.VERSION}}
          IMAGE_NAME: ${{ steps.vars.outputs.IMAGE_NAME }}

  code-checks:
    name: Code Checks
    runs-on: ubuntu-latest
    needs: vars
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry==$POETRY_VERSION
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "poetry"
      - run: poetry install
      - run: make fmt-check
      - run: make docs-build
      - run: make type-check
      - run: make test-coverage

  build-image:
    name: Build image
    runs-on: ubuntu-latest
    needs: vars
    env:
      VERSION: ${{ needs.vars.outputs.VERSION}}
      IMAGE_NAME: ${{ needs.vars.outputs.IMAGE_NAME }}
    steps:
      - uses: actions/checkout@v3
      - run: docker build -t $IMAGE_NAME:$VERSION .
      - run: docker save $IMAGE_NAME -o $IMAGE_PATH
      - uses: actions/upload-artifact@v3
        with:
          name: image
          path: ${{ env.IMAGE_PATH }}

  push-image:
    name: Push image
    runs-on: ubuntu-latest
    needs: [ vars, code-checks, build-image ]
    env:
      VERSION: ${{ needs.vars.outputs.VERSION}}
      IMAGE_NAME: ${{ needs.vars.outputs.IMAGE_NAME }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: image
          path: /tmp
      - uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_CI }}
      - run: doctl registry login
      - run: docker load --input $IMAGE_PATH
      - run: echo $IMAGE_NAME:$VERSION
      - run: echo docker image ls -a
      - run: docker push $IMAGE_NAME:$VERSION
