[tool.poetry]
name = "recipes"
version = "0.3.1"
description = ""
authors = ["Sam Thorold <sam.thorold@gmail.com>"]
readme = "README.md"
packages = [
    {"include" = "recipes", from = "src"},
]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.101.1"
psycopg2-binary = "^2.9.7"
uvicorn = {extras = ["standard"], version = "^0.23.2"}
pydantic-settings = "^2.0.3"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.20"}
asyncpg = "^0.28.0"

[tool.poetry.group.dev.dependencies]
black = "^23.7.0"
mypy = "^1.5.1"
mkdocstrings = {extras = ["python"], version = "^0.22.0"}
mkdocs-material = "^9.2.3"
flake8 = "^6.1.0"
flake8-pyproject = "^1.2.3"
pytest-coverage = "^0.0"
httpx = "^0.24.1"
anyio = "^3.7.1"
pytest-asyncio = "^0.21.1"
asgi-lifespan = "^2.1.0"
gevent = "^23.7.0"
aiosqlite = "^0.19.0"

[tool.pytest.ini_options]
pythonpath = ["src"]
addopts = "--doctest-modules"

[tool.coverage.run]
parallel = true
branch = true
omit = [
    "tests/*",
]
concurrency = ["gevent"]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 100
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
strict = true

[tool.flake8]
max-line-length = 1000

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
